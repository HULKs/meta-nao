From 82566c3983a20b7706965075dbce6dd3211fd916 Mon Sep 17 00:00:00 2001
From: Kas User <kas@example.com>
Date: Mon, 13 Sep 2021 21:27:08 +0000
Subject: [PATCH] cgos 32-bit (softbank)

---
 drivers/cgosdrv/DrvLx.c | 63 ++++++++++++++++++++++++++++++++++-------
 1 file changed, 52 insertions(+), 11 deletions(-)

diff --git a/drivers/cgosdrv/DrvLx.c b/drivers/cgosdrv/DrvLx.c
index 740ab859cfb6..087bdcc64cda 100644
--- a/drivers/cgosdrv/DrvLx.c
+++ b/drivers/cgosdrv/DrvLx.c
@@ -38,6 +38,10 @@
 #include <linux/kernel.h>
 #include <linux/slab.h>
 
+#ifdef CONFIG_COMPAT
+#include <linux/compat.h>
+#endif
+
 #include <linux/uaccess.h>
 #include <linux/miscdevice.h>
 #include "CgosIobd.h"
@@ -89,6 +93,36 @@ int cgos_release(struct inode *_inode, struct file *f)
 
 #define return_ioctl(ret) { if (pbuf!=buf) kfree(pbuf); return ret; }
 
+static long cgos_common_ioctl(struct file *f, unsigned int command, IOCTL_BUF_DESC *iobd);
+
+#ifdef CONFIG_COMPAT
+
+typedef struct {
+  compat_uptr_t pInBuffer;
+  unsigned int nInBufferSize;
+  compat_uptr_t pOutBuffer;
+  unsigned int nOutBufferSize;
+  compat_uptr_t pBytesReturned;
+  } IOCTL_BUF_DESC_COMPAT;
+
+long cgos_compat_ioctl(struct file *f, unsigned int command, unsigned long arg)
+  {
+  IOCTL_BUF_DESC_COMPAT iobdCompat;
+  IOCTL_BUF_DESC iobd;
+  if (copy_from_user(&iobdCompat,(IOCTL_BUF_DESC_COMPAT *)compat_ptr(arg),sizeof(iobdCompat)))
+    return -EFAULT;
+
+  iobd.pInBuffer=compat_ptr(iobdCompat.pInBuffer);
+  iobd.nInBufferSize=iobdCompat.nInBufferSize;
+  iobd.pOutBuffer=compat_ptr(iobdCompat.pOutBuffer);
+  iobd.nOutBufferSize=iobdCompat.nOutBufferSize;
+  iobd.pBytesReturned=compat_ptr(iobdCompat.pBytesReturned);
+
+  return cgos_common_ioctl(f, command, &iobd);
+  }
+
+#endif
+
 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35)
 #define ioctl unlocked_ioctl
 long cgos_ioctl(struct file *f, unsigned int command, unsigned long arg)
@@ -97,34 +131,38 @@ int cgos_ioctl(struct inode *_inode, struct file *f, unsigned int command, unsig
 #endif
   {
   IOCTL_BUF_DESC iobd;
+  if (copy_from_user(&iobd,(IOCTL_BUF_DESC *)arg,sizeof(iobd)))
+    return -EFAULT;
+  return cgos_common_ioctl(f, command, &iobd);
+  }
+
+static long cgos_common_ioctl(struct file *f, unsigned int command, IOCTL_BUF_DESC *iobd)
+  {
   unsigned char buf[512];
   unsigned char *pbuf=buf;
   unsigned int ret, rlen=0, maxlen;
 
-  if (copy_from_user(&iobd,(IOCTL_BUF_DESC *)arg,sizeof(iobd)))
-    return -EFAULT;
-
-  maxlen=iobd.nInBufferSize>iobd.nOutBufferSize?iobd.nInBufferSize:iobd.nOutBufferSize;
+  maxlen=iobd->nInBufferSize>iobd->nOutBufferSize?iobd->nInBufferSize:iobd->nOutBufferSize;
   if (maxlen>sizeof(buf))
     pbuf=kmalloc(maxlen,GFP_KERNEL);
   if (!pbuf) return -ENOMEM;
 
-  if (iobd.nInBufferSize) {
-    if (!iobd.pInBuffer || copy_from_user(pbuf,iobd.pInBuffer,iobd.nInBufferSize))
+  if (iobd->nInBufferSize) {
+    if (!iobd->pInBuffer || copy_from_user(pbuf,iobd->pInBuffer,iobd->nInBufferSize))
       return_ioctl(-EFAULT);
     }
 
-  ret=cgos_issue_request(command,pbuf,iobd.nInBufferSize,
-     pbuf,iobd.nOutBufferSize,&rlen);
+  ret=cgos_issue_request(command,pbuf,iobd->nInBufferSize,
+     pbuf,iobd->nOutBufferSize,&rlen);
   if (ret) return_ioctl(-EFAULT);
 
   if (rlen) {
-    if (!iobd.pOutBuffer || copy_to_user(iobd.pOutBuffer,pbuf,rlen))
+    if (!iobd->pOutBuffer || copy_to_user(iobd->pOutBuffer,pbuf,rlen))
       return_ioctl(-EFAULT);
     }
   if (pbuf!=buf) kfree(pbuf);
-  if (iobd.pBytesReturned)
-    if (copy_to_user(iobd.pBytesReturned,&rlen,sizeof(unsigned int)))
+  if (iobd->pBytesReturned)
+    if (copy_to_user(iobd->pBytesReturned,&rlen,sizeof(unsigned int)))
       return -EFAULT;
 
   return 0;
@@ -146,6 +184,9 @@ EXPORT_SYMBOL(cgos_issue_request);
 static struct file_operations cgos_fops={
   owner: THIS_MODULE,
   ioctl: cgos_ioctl,
+#ifdef CONFIG_COMPAT
+  compat_ioctl: cgos_compat_ioctl,
+#endif
   open: cgos_open,
   release: cgos_release,
   };
